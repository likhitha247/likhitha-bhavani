# -*- coding: utf-8 -*-
"""eda1 30/12

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MoUfC7cOJozPhn7z40xR6zFjFMkOkKiZ
"""

#load the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/home/data_clean.csv')
data

data.info()

#data structure
print(type(data))
print(data.shape)

data.shape

#data types
data.dtypes

#drop  duplicate column and unnamed column
data1 = data.drop(['Unnamed: 0',"Temp C"], axis=1)
data1

#Convert the month column data type to integer data type
data1['Month']=pd.to_numeric(data['Month'],errors='coerce')
data1.info()

#checking for duplicated row in the table
#print the duplicated row
data1[data1.duplicated(keep = False)]

#change column names (reanme the columns)
data1.rename({'Solar.R':'Solar'},axis=1,inplace=True)
data1

#display data info
data1.info()

#display data1 missing values count in each column using isnull().sum()
data1.isnull().sum()

#visualize data1 missing values
cols = data1.columns
colours = ['black', 'yellow']
sns.heatmap(data1[cols].isnull(),cmap=sns.color_palette(colours),cbar = True)

#find the mean and median values of each numeric column
median_ozone = data1['Ozone'].median()
median_solar = data1['Solar'].median()
median_wind = data1['Wind'].median()
mean_ozone = data1['Ozone'].mean()
mean_solar = data1['Solar'].mean()
mean_wind = data1['Wind'].mean()
print("Median of ozone: ",median_ozone)
print("Median of solar: ",median_solar)
print("Median of wind: ",median_wind)
print("Mean of ozone: ",mean_ozone)
print("Mean of solar: ",mean_solar)
print("Mean of wind: ",mean_wind)

#replace the ozone missimg values with median
data1['Ozone'] = data1['Ozone'].fillna(median_ozone)
data1.isnull().sum()

#replace the solar missing values with median
data1['Solar'] = data1['Solar'].fillna(median_solar)
data1.isnull().sum()
data1['Wind'] = data1['Wind'].fillna(median_wind)
data1.isnull().sum()

#find the mode values of categorical column (weather)
print(data1["Weather"].value_counts())
mode_weather = data1["Weather"].mode()[0]
print(mode_weather)

#find the mode values of categorical column (month)
print(data1["Month"].value_counts())
mode_month = data1["Month"].mode()[0]
print(mode_month)

#Impute missing values (replace NaN with mode etc.) of "weather" using fillna()
data1["Weather"] = data1["Weather"].fillna(mode_weather)
data1.isnull().sum()

#Impute missing values (replace NaN with mode etc.) of "Month" using fillna()
data1["Month"] = data1["Month"].fillna(mode_month)
data1.isnull().sum()

data1.tail()

#Reset the index column
data1.reset_index(drop=True)

"""Detection of outliners in the columns

Method1:Using histograms and box plots


"""

#create a figure with two subplots, stacked vertically
fig, axes = plt.subplots(2,1,figsize=(8,16), gridspec_kw={'height_ratios':[1,3]})

#plot the boxplot in the first (top) subplot
sns.boxplot(data1['Ozone'],ax=axes[0], color='skyblue', width=0.5, orient= 'h')
axes[0].set_title('Boxplot')
axes[0].set_xlabel('Ozone Levels')

# Plot the histogram with KDE curve in the second (bottom) subplot
sns.histplot(data1["Ozone"], kde=True, ax=axes[1], color='purple', bins=30)
axes [1] .set_title("Histogram with KDE")
axes [1] .set_xlabel("Ozone Levels")
axes [1] .set_ylabel("Frequency")

#Adjust layout for better spacing
plt.tight_layout()

#show the plot
plt.show()

"""Observations

- The ozone column has extreme values beyond 81 as seen from box plot
- The same is confirmed from the below right-skewed histogram


"""

#create a figure with two subplots, stacked vertically
fig, axes = plt.subplots(2,1,figsize=(8,16), gridspec_kw={'height_ratios':[1,3]})

#plot the boxplot in the first (top) subplot
sns.boxplot(data1['Solar'],ax=axes[0], color='skyblue', width=0.5, orient= 'h')
axes[0].set_title('Boxplot')
axes[0].set_xlabel('Solar Levels')

# Plot the histogram with KDE curve in the second (bottom) subplot
sns.histplot(data1["Solar"], kde=True, ax=axes[1], color='yellow', bins=30)
axes [1] .set_title("Histogram with KDE")
axes [1] .set_xlabel("Solar Levels")
axes [1] .set_ylabel("Frequency")

#Adjust layout for better spacing
plt.tight_layout()

#show the plot
plt.show()

#display boxplot for ozone
plt.figure(figsize=(16,2))
plt.boxplot(data1['Ozone'],vert=False)

#extract outliners from boxplot for ozone column
plt.figure(figsize=(6,2))
boxplot_data = plt.boxplot(data1["Ozone"],vert=False)
[item.get_xdata() for item in boxplot_data['fliers']]

"""### method 2 for outlier detection"""

data1["Ozone"].describe()

mu = data1["Ozone"].describe()[1]
sigma = data1["Ozone"].describe()[2]

for x in data1["Ozone"]:
    if ((x < (mu-  3*sigma)) or (x > (mu + 3*sigma))):
        print(x)

"""observations
 -It is observed that only two outliers are idenfied using std method    
 -In box plot method more no of outliers are identified
 -This is because the assumption of normality is not satisfied in this column

# Quantile Qunatile plot for detection of outlier
"""

import scipy.stats as stats

#create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(data1["Ozone"], dist="norm", plot=plt)
plt.title("Q_Q Plot for Outlier Detection", fontsize=14)
plt.xlabel("Theoretical Quantiles", fontsize=12)

"""obsevartions of Q-Q
 -the data does not follow normal
distribution as the data points are deviating significantly away from red line
  -the data show a right skewed distribution and possible of outlier
"""

sns.violinplot(data=data1["Ozone"], color='darkblue')
plt.title("Violin Plot")

plt.show()

sns.swarmplot(data=data1, x = "Weather", y = "Ozone",color="Orange",palette="Set2",size=6)

sns.stripplot(data=data1, x = "Weather", y = "Ozone",color="orange",size=6, jitter = True)

sns.kdeplot(data=data1["Ozone"], fill=True, color="yellow")
sns.rugplot(data=data1["Ozone"], color="black")

sns.boxplot(data=data1, x = "Weather", y="Ozone")

plt.scatter(data1["Wind"], data1["Temp"])

data1["Wind"].corr(data1["Temp"])

#read all numeric (contunuous) columns into a new table data1_numeric
data1_numeric = data1.select_dtypes(include=['float64','int64'])
data1_numeric

#print correlation coefficients for all above columns
data1_numeric.corr()



"""OBSERVARTIONS

*  The highest corelation strength is observed between ozone and temperature(0.597087)
*   The  next highest corelation strength is observed between ozone and wind (-0.523738)
*   The next  highest corelation strength is observed between wind and temperature(-0.441228)
*  The least correlation strength is observed between solar and wind (-0.055874)






"""

# plot a pair plot between all numeric coulmns using seaborn
sns.pairplot(data1_numeric)

"""# Transformation"""

#creatyung dummy variable for weather column
data2 = pd.get_dummies(data1, columns=['Weather','Weather'])
data2

"""Normalization of the data"""

data1_numeric.values

#Normalization of the data
from numpy import set_printoptions
from sklearn.preprocessing import MinMaxScaler

array = data1_numeric. values

scaler = MinMaxScaler(feature_range=(0,1))
rescaledX = scaler. fit_transform(array)

#transformed data
set_printoptions(precision=2)
print(rescaledX[0:10,:])