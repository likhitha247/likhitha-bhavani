# -*- coding: utf-8 -*-
"""decision tree classification(3-3-2025)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_ItN8d5aTREb6i3o-8GxYsMkrNENzHhj
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

iris = pd.read_csv("/home/iris.csv")

iris

#Bar plot for categorical column "variety"
import seaborn as sns
counts = iris["variety"].value_counts()
sns.barplot(data = counts)

iris.info()

iris[iris.duplicated(keep = False)]

"""# observations
* There are 150 rows and 5 columns
* There are no Null values
* There is one duplicated row
* The x-columns are sepal.length, sepal.width, petal.length and petal.widtl
* All the x-columns are continuous
* The y-column is "variety" which is categorical
* There are three flower categories (classes)
"""

#drop the duplicates
iris = iris.drop_duplicates(keep='first')

# Ensure further that no duplicated rows are present
iris[iris.duplicated]

# Reset the index
iris = iris.reset_index(drop=True)
iris

"""# perfrom label encoding of target column"""

#Encode the three flower classes as 0,1,2

labelencoder = LabelEncoder()
iris.iloc[:, -1] = labelencoder.fit_transform(iris.iloc[:, -1])
iris.head()

#check the data types after label encoding
iris.info()

"""**observation**

* The target column ('variety') is still object type. It needs to be converted to numeric(int)
"""

#Convert the target column data type to integer
iris['variety' ] = pd.to_numeric(labelencoder.fit_transform(iris['variety' ]))
print(iris.info())

#Divide  the dataset in to x-columns and y-columns

x=iris.iloc[:,0:4]
y=iris['variety']

#Further splitting of data into training and testing data sets
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)
x_train

"""**Building Decision Tree Classifier using Entropy Criteria**"""

model = DecisionTreeClassifier(criterion='entropy',max_depth= None)
model.fit(x_train,y_train)

#plot the decision tree
plt.figure(dpi=1200)
tree.plot_tree(model);

fn=['sepal length (cm)','sepal width (cm)','petal length (cm)','petal width (cm)']
cn=['setosa','versicolor','virginica']
plt.figure(dpi=1200)
tree.plot_tree(model,feature_names = fn, class_names=cn,filled = True);

