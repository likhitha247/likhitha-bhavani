# -*- coding: utf-8 -*-
"""Linear regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11vvh5n9vrTxnepZNnhERZQeUnceDaN9W
"""

#Load the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data1 = pd.read_csv("/home/NewspaperData.csv")
print(data1)

data1

data1.info()

data1.isnull().sum()

data1.describe()

# Boxplot for daily column
plt.figure(figsize=(6,3))
plt. title("Box plot for Daily Sales")
plt.boxplot(data1["daily"], vert = False)
plt. show()

sns.histplot(data1['daily'], kde = True,stat='density',)
plt.show()

sns.histplot(data1['sunday'], kde = True,stat='density',)
plt.show()

"""Observations

* There are no missing values
* The daily column values appears to be right-skewed
* The sunday column vaues also appear to be right-skewed
* There are two outliers in both daily column and also in sunday column as observed from the boxplots

# Scatter plot and Correlation strength
"""

x= data1["daily"]
y = data1["sunday"]
plt.scatter(data1["daily"], data1["sunday"])
plt.xlim(0, max(x) + 100)
plt.ylim(0, max(y) + 100)
plt.show()

data1["daily"].corr(data1["sunday"])

data1[["daily", "sunday"]].corr()

"""observation

*  The relationship between x (daily) and y (sunday) is seen to be linear as seen from scatter plot
* The correlation is strong postive with Pearson's correlation coefficient of 0.958154

# Fit a linear regression model
"""

# Build regression model

import statsmodels.formula.api as smf
model1 = smf.ols("sunday~daily",data = data1).fit()

model1.summary()

#plot the scatter plot and overlay the fitted straight line using matplotlib
x = data1["daily"].values
y = data1["sunday"].values
plt.scatter(x, y, color ="m",marker = "o",s = 30)
b0 = 13.84
b1 =1.33
# predicted response vector
y_hat = b0 + b1*x
# plotting the regression Line
plt. plot(x, y_hat, color = "g")
# putting Labels
plt. xlabel('x')
plt.ylabel('y')
plt. show()

#plot the linear regression line using seaborn regplot() method
sns.regplot(x="daily", y="sunday", data=data1)
plt.xlim([0,1250])
plt.show()

#plot the linear regression line using seaborn regplot() method
sns.regplot(x="daily", y="sunday", data=data1)
plt.xlim([0,1250])
plt.show()

"""# predict for new data points(test data)

"""

#predict sunday sales for 200 and 300 and 1500 daily circulation
newdata = pd.Series([200,300,1500])

data_pred = pd.DataFrame(newdata, columns = ["daily"])
data_pred

model1.predict(data_pred)

pred = model1.predict(data1["daily"])
pred

#add predicated values as a column in data1
data1["Y_hat"] = pred
data1

#compute the error values(residuals) and add as another column
data1["residuals"] = data1["sunday"] - data1["Y_hat"]
data1

#compute mean squared error for the model
mse = np.mean((data1["daily"]-data1["Y_hat"])**2)
rmse = np.sqrt(mse)
print("MSE: ",mse)
print("RMSE: ",rmse)

# Compute Mean Absolute Error (MAE)

mae = np.mean(np.abs(data1["daily"]-data1["Y_hat"]) )
mae

"""# checking the model rediuals scatter plot"""

#plot the rediuals verus y_hat
plt.scatter(data1["Y_hat"], data1["residuals"])